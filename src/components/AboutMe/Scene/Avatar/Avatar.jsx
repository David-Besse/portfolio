/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import PropTypes from "prop-types";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { memo, useEffect, useRef } from "react";

/**
 * Renders the Avatar component.
 *
 * @param {number} scaling - The scaling factor for the avatar.
 * @return {JSX.Element} The rendered Avatar component.
 */
const Avatar = memo(({ scaling = 7.8 }) => {
  const group = useRef();
  const { nodes, materials } = useGLTF("/models/avatar.glb");
  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  typingAnimation[0].name = "Typing";

  const { actions } = useAnimations([typingAnimation[0]], group);

  useEffect(() => {
    actions["Typing"].reset().fadeIn(0.5).play();
    return () => actions["Typing"].fadeOut(0.5);
  }, [actions]);

  return (
    <group
      ref={group}
      dispose={null}
      position={[0.4, -5, -0.5]}
      rotation={[-Math.PI/2, 0, 0]}
      scale={scaling}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
        castShadow
        receiveShadow
      />
    </group>
  );
});

Avatar.displayName = "Avatar";

Avatar.propTypes = {
  scaling: PropTypes.number,
};

useGLTF.preload("/models/avatar.glb");

export default Avatar;
